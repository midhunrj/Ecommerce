
<%- include("./layouts/Admin-header.ejs") %>
        <section class="content-main">
            <form action="/Add-product" method="post" enctype="multipart/form-data" onsubmit="return validate()" novalidate>
            <div class="row">
                <div class="col-9">
                    <div class="content-header">
                        <h2 class="content-title">Add New Product</h2>
                        
                        <div>
                            <button class="btn btn-light rounded font-sm mr-5 text-body hover-up">Save to draft</button>
                             <button class="btn btn-md rounded font-sm hover-up" type="submit" >Publish</button>
                            
                        </div>
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="card mb-4">
                        <div class="card-body">
                            <div class="mb-4">
                                <label for="product_title" class="form-label">Product name</label>
                                <input type="text" name="productname" id="productname" placeholder="Type here" class="form-control">
                                <div id="nameError" class="Error"></div>
                            </div>
                            <div class="row gx-3">
                                <div class="col-md-4  mb-3">
                                    <label for="product_color" class="form-label">Color</label>
                                    <input type="text" name="Color" id="Color" placeholder="Type here" class="form-control" id="product_color">
                                    <div id="colorError" class="Error"></div>
                                </div>
                                <div class="col-md-4  mb-3">
                                    <label for="product_size" class="form-label">Stock</label>
                                    <input type="text" name="stock" id="stock" placeholder="Type here" class="form-control" id="product_size">
                                    <div id="stockError" class="Error"></div>
                                </div>
                            </div>
                            <div class="mb-4">
                                <label for="product_brand" class="form-label">Brand</label>
                                <input type="text"  name="Brand" id="Brand" placeholder="Type here" class="form-control" id="product_brand">
                                <div id="brandError" class="Error"></div>
                            </div>
                        </div>
                    </div> <!-- card end// -->
                    <div class="card mb-4">
                        <div class="card-body">
                            <div>
                                <label class="form-label">Description</label>
                                <textarea placeholder="Type here" id="description"  name="description" class="form-control" rows="4"></textarea>
                                <div id="descriptionError" class="Error"></div>
                            </div>
                        </div>
                    </div> <!-- card end// -->
                    <div class="card mb-4">
                        <div class="card-body">
                            <div>
                                <label class="form-label">Images</label>
                                <input class="form-control" type="file" name="image" multiple id="imageInput">
                                <div id="imageError" class="Error"></div>
                            </div>
                            <div id="addedImagesContainer" class="thumbnails-container"></div>
                            
                        </div>
                    </div> <!-- card end// -->
                </div>
                
                <div class="col-lg-3">
                    <div class="card mb-4">
                        <div class="card-body">
                            <div class="mb-4">
                                <label class="form-label">Price</label>
                                <input type="text" id="price" name="price" placeholder="Type here" class="form-control">
                                <div id="priceError" class="Error"></div>
                            </div>
                        
                            <div class="mb-4">
                                <label class="form-label">Status</label>
                                <select class="form-select">
                                    <option>Published</option>
                                    <option>Draft</option>
                                </select>
                            </div>
                            <!-- <div class="mb-4">
                                <label class="form-label">Tags</label>
                                <input type="text" placeholder="Type here" class="form-control">
                            </div>
                            <a href="#" class="font-xs hover-up mr-15"><i class="font-xs material-icons md-close text-body"></i> Tech</a>
                            <a href="#" class="font-xs hover-up mr-15"><i class="font-xs material-icons md-close text-body"></i> Mobile</a>
                            <a href="#" class="font-xs hover-up mr-15"><i class="font-xs material-icons md-close text-body"></i> Apple</a> -->
                            <hr>
                            <h5 class="mb-3">Categories</h5>
                            <% for (let i = 0; i < category.length; i++) { %>
                                <div id="categoryError" class="Error"></div>

                                <div class="form-check">
                                    <input class="form-check-input" type="radio" value="<%= category[i]._id %>" id="product-cat <%= category[i]._id %>" name="Category">
                                    <label class="form-check-label" for="product-cat-<%= category[i]._id %>"><%= category[i].catName %></label>
                                    
                                </div>
                                
                            <% } %>
                            
                            
                        </div>
                    
                    </div> <!-- card end// -->
                </div>
            </div>
        </form>
        </section>
    
        <footer class="main-footer font-xs">
            <div class="row pb-30 pt-15">
                <div class="col-sm-6">
                    <script>
                    document.write(new Date().getFullYear())
                    </script> Â©, Evara - HTML Ecommerce Template .
                </div>
                <div class="col-sm-6">
                    <div class="text-sm-end">
                        All rights reserved
                    </div>
                </div>
            </div>
        </footer>
    </main>
    
    



<script src="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.js"></script>
<script>
document.getElementById("imageInput").addEventListener("change", handleFileSelect);

function handleFileSelect(event) {
    const addedImagesContainer = document.getElementById("addedImagesContainer");
    addedImagesContainer.innerHTML = ""; // Clear previous content

    const files = event.target.files;

    for (let i = 0; i < files.length; i++) {
        const file = files[i];

        // Create thumbnail element
        const thumbnail = document.createElement("div");
        thumbnail.classList.add("thumbnail");

        // Create image element
        const img = document.createElement("img");
        img.src = URL.createObjectURL(file);
        img.alt = "thumbnail";

        // Set a fixed width for the image
        img.style.width = "50px"; // Adjust the width as needed
        img.style.height = "auto";

        // Append image to thumbnail
        thumbnail.appendChild(img);

        // Append thumbnail to the container
        addedImagesContainer.appendChild(thumbnail);

        // Initialize Cropper.js on the selected image
        const cropper = new Cropper(img, {
            aspectRatio: 16 / 9, // Set your desired aspect ratio here
            viewMode: 1, // Set view mode to 1: fit the container
            zoomable: false, // Disable zooming
            crop(event) {
                const croppedCanvas = cropper.getCroppedCanvas();
                const croppedDataUrl = croppedCanvas.toDataURL();
                updateInputField(croppedDataUrl); // Update hidden input field with cropped data
            },
        });
    }
}

function updateInputField(dataUrl) {
    // Update hidden input field with cropped image data
    document.getElementById("croppedImageData").value = dataUrl;
}
</script>
    <script>
        document.getElementById("imageInput").addEventListener("change", handleFileSelect);
      
        function handleFileSelect(event) {
          const addedImagesContainer = document.getElementById("addedImagesContainer");
          addedImagesContainer.innerHTML = ""; // Clear previous content
      
          const files = event.target.files;
      
          for (let i = 0; i < files.length; i++) {
            const file = files[i];
      
            // Create thumbnail element
            const thumbnail = document.createElement("div");
            thumbnail.classList.add("thumbnail");
      
            // Create image element
            const img = document.createElement("img");
            img.src = URL.createObjectURL(file);
            img.alt = "thumbnail";
      
            // Set a fixed width for the image
            img.style.width = "50px"; // Adjust the width as needed
            img.style.height = "auto";
      
            // Create remove icon
            const removeIcon = document.createElement("span");
            removeIcon.classList.add("remove-icon");
            removeIcon.innerHTML = "&times;"; // Multiplication symbol as a cross
      
            // Event listener to remove the image on icon click
            removeIcon.addEventListener("click", function () {
              thumbnail.remove();
              updateInputField();
            });
      
            // Append elements to thumbnail
            thumbnail.appendChild(img);
            thumbnail.appendChild(removeIcon);
      
            // Append thumbnail to the container
            addedImagesContainer.appendChild(thumbnail);
          }
      
          updateInputField();
          
        }
      
        function updateInputField() {
          const addedImagesContainer = document.getElementById("addedImagesContainer");
          const thumbnails = addedImagesContainer.getElementsByClassName("thumbnail");
      
          // Get the names of the selected files and update the input field
          const fileNames = Array.from(thumbnails).map((thumbnail) => {
            const img = thumbnail.getElementsByTagName("img")[0];
            return img.alt; // Assuming the alt attribute contains the file name
          });
      
          // Update the input field with the file names
          const inputField = document.getElementById("imageInput");
          inputField.value = fileNames.join(", ");
        }

     
      </script>
    <script>
        function displayError(element, message) {
          const errorElement = document.getElementById(`${element.id}Error`);
          errorElement.innerHTML = message;
          element.parentNode.appendChild(errorElement);
      }
  
      function checkEmptyFields() {
          const fields = ['name', 'price', 'Brand', 'Color', 'stock','description','imageInput'];
  
          let isEmpty = false;
  
          fields.forEach(field => {
              const inputElement = document.getElementById(field);
              const errorElement = document.getElementById(`${field}Error`);
  
              if (inputElement.value.trim() === '') {
                  isEmpty = true;
                  displayError(inputElement, 'Field is required');
              } else {
                  errorElement.innerHTML = ''; // Clear previous error messages
              }
          });
  
          return !isEmpty;
      }
        function validate() {

// Input feilds
const name = document.getElementById('productname');
   const color = document.getElementById('Color');
   const brand = document.getElementById('Brand');
   const price = document.getElementById('price');
   const description = document.getElementById('description');
   const stock = document.getElementById('stock');
   const image = document.getElementById('imageInput');

   // Error fields
   const nameError = document.getElementById('nameError');
   const descriptionError = document.getElementById('descriptionError');
   const brandError = document.getElementById('brandError'); // Corrected ID
   const priceError = document.getElementById('priceError');
   const colorError = document.getElementById('colorError');
   const stockError = document.getElementById('stockError');
   const imageError = document.getElementById('imageError');

   // Regex
   const nameRegex = /^[A-Za-z0-9]/;
   const descriptionRegex = /^[A-Za-z0-9]/;
   const colorRegex = /^[A-Za-z]/;
   const priceRegex = /^[0-9]/;
   const stockRegex = /^[0-9]/;
   const brandRegex = /^[A-Za-z]/;

   // Name field
   if (name.value.trim() === '') {
      nameError.innerHTML = 'Field is required';
      setTimeout(() => {
         nameError.innerHTML = '';
      }, 5000);
      return false;
   }
   if (!nameRegex.test(name.value)) {
      nameError.innerHTML = 'First letter should be capital';
      setTimeout(() => {
         nameError.innerHTML = '';
      }, 5000);
      return false;
   }

   // Description field
   if (description.value.trim() === '') {
      descriptionError.innerHTML = 'Field is required';
      setTimeout(() => {
         descriptionError.innerHTML = '';
      }, 5000);
      return false;
   }
   if (!descriptionRegex.test(description.value)) {
      descriptionError.innerHTML = 'Please enter a valid description';
      setTimeout(() => {
         descriptionError.innerHTML = '';
      }, 5000);
      return false;
   }

   // Brand field (Corrected variable name)
   if (brand.value.trim() === '') {
      brandError.innerHTML = 'Field is required';
      setTimeout(() => {
         brandError.innerHTML = '';
      }, 5000);
      return false;
   }

   // Stock field
   if (stock.value.trim() === '') {
      stockError.innerHTML = 'Field is required';
      setTimeout(() => {
         stockError.innerHTML = '';
      }, 5000);
      return false;
   }
   if (!stockRegex.test(stock.value)) {
      stockError.innerHTML = 'please enter a valid number';
      setTimeout(() => {
         stockError.innerHTML = '';
      }, 5000);
      return false;
   }

   // Image field
   if (image.value.trim() === '') {
      imageError.innerHTML = 'Upload at least one image';
      setTimeout(() => {
         imageError.innerHTML = '';
      }, 5000);
      return false;
   }

   // Color field
   if (color.value.trim() === '') {
      colorError.innerHTML = 'Field is required';
      setTimeout(() => {
         colorError.innerHTML = '';
      }, 5000);
      return false;
   }

   // Price field
   if (price.value.trim() === '') {
      priceError.innerHTML = 'Field is required';
      setTimeout(() => {
         priceError.innerHTML = '';
      }, 5000);
      return false;
   }
   if (!priceRegex.test(price.value)) {
      priceError.innerHTML = 'Please enter a valid number';
      setTimeout(() => {
         priceError.innerHTML = '';
      }, 5000);
      return false;
   }
   const selectedCategory = document.querySelector('input[name="Category"]:checked');
   const categoryError = document.getElementById('categoryError'); // Add this line

   if (!selectedCategory) {
      categoryError.innerHTML = 'Please select a category';
      setTimeout(() => {
         categoryError.innerHTML = '';
      }, 5000);
      return false;
   }


   return true;
}
    </script>
    <script>
        document.addEventListener("DOMContentLoaded", function() {
            // Get the current URL
            const currentUrl = window.location.pathname;
           
            // Define an array of menu items with their corresponding URLs
            const menuItems = [
                { url: "/admin_home", id: "dashboard" },
                { url: "/admin/users", id: "users" },
                { url: "/products-list", id: "products" },
                { url: "/admin-orderlist", id: "orders" },
                { url: "/Add-product", id: "add-product" },
                { url: "/new-coupon", id: "coupons" },
                {url:"/admin/categories",id:"categories"}
                // Add more menu items as needed
            ];
        
            // Find the active menu item based on the current URL
            const activeMenuItem = menuItems.find(item => item.url.includes(currentUrl));
        
        
            if (activeMenuItem) {
                // Highlight the active menu item
                const activeMenuLink = document.querySelector(`.menu-item#${activeMenuItem.id}`);
               
                if (activeMenuLink) {
                    activeMenuLink.classList.add("active");
                }
        
                // Store the ID of the active menu item in local storage
                localStorage.setItem("activeMenuItem", activeMenuItem.id);
            }
        });
        </script>
    <script src="Admin-assets/js/vendors/jquery-3.6.0.min.js"></script>
    <script src="Admin-assets/js/vendors/bootstrap.bundle.min.js"></script>
    <script src="Admin-assets/js/vendors/select2.min.js"></script>
    <script src="Admin-assets/js/vendors/perfect-scrollbar.js"></script>
    <script src="Admin-assets/js/vendors/jquery.fullscreen.min.js"></script>
    <!-- Main Script -->
    <script src="Admin-assets/js/main.js" type="text/javascript"></script>
</body>

</html>