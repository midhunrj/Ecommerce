
<html>
<head>
    <meta charset="utf-8">
    <title>Evara Dashboard</title>
    <meta http-equiv="x-ua-compatible" content="ie=edge">
    <meta name="description" content="">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta property="og:title" content="">
    <meta property="og:type" content="">
    <meta property="og:url" content="">
    <meta property="og:image" content="">
     <!-- Favicon -->
     <link rel="shortcut icon" type="image/x-icon" href="Admin-assets/imgs/theme/favicon.svg">
     <!-- Template CSS -->
     <link href="/Admin-assets/css/main.css" rel="stylesheet" type="text/css"/>
     <style>
        #addedImagesContainer {
      display: flex;
      gap: 10px;
      overflow-x: auto;
    }

    .thumbnail {
      display: flex;
      flex-direction: column;
      align-items: center;
    }

    .thumbnail img {
      width: 50px;
      height: auto;
    }

    .remove-icon {
      cursor: pointer;
    }
    .Error{
        color:red;
        font-size: 16px;
    }
    </style>
</head>

<body>
    <div class="screen-overlay"></div>
    <aside class="navbar-aside" id="offcanvas_aside">
        <div class="aside-top">
            <a href="index.html" class="brand-wrap">
                <img src="Admin-assets/imgs/theme/logo.png" class="logo" alt="Evara Dashboard">
            </a>
            <div>
                <button class="btn btn-icon btn-aside-minimize"> <i class="text-muted material-icons md-menu_open"></i> </button>
            </div>
        </div>
        <%- include("./layouts/nav.ejs") %>
    </aside>
    <main class="main-wrap">
        <%- include("./layouts/header.ejs") %>
        <form action="/update-Product" method="POST" enctype="multipart/form-data" class="row g-3" onsubmit="return validate()">

            <!-- <input type="hidden" name="_method" value="PUT"> -->
            <% console.log( "this is "+ products._id ) %>
    <input type="hidden" name="id" value="<%= products._id %>">
    <div class="col-12">
        <div class="content-header">
            <h2 class="content-title">EditProduct</h2>
            <div>
                <button class="btn btn-light rounded font-sm mr-2 text-body hover-up">Save to draft</button>
                <button type="submit" class="btn btn-md rounded font-sm hover-up">Publish</button>
                
            </div>
        </div>
    </div>

    <div class="col-lg-6">
        <div class="card mb-4">
            <div class="card-body">
                <div class="mb-3">
                    <label for="name" class="form-label">Product title</label>
                    <input type="text" id="name" name="productname" placeholder="Type here"    class="form-control"  value="<%= products.productname %>" required>
                    <p class="text-danger" id="nameError"></p>
                </div>
                <div class="row gx-3">
                    <div class="col-md-4 mb-3">
                        <label for="Color" class="form-label">Color</label>
                        <input  type="text" id="Color"  name="Color" placeholder="Type here" class="form-control"  value="<%= products.Color %>" required>
                        <p class="text-danger" id="colorError"></p>
                    </div> 
                    <div class="col-md-4 mb-3">
                        <label for="product_color" class="form-label">Price</label>
                        <input type="text" id="price" name="Price" placeholder="Type here" class="form-control" id="product_color" value="<%= products.price %>" required>
                        <p class="text-danger" id="priceError"></p>
                        <p class="text-danger" id="salePriceError"></p>
                        
                    </div>
                    <div class="col-md-4 mb-3">
                        <label for="product_size"   class="form-label">Stock</label>
                        <input type="text" id="stock" name="Size" placeholder="Type here" class="form-control"  value="<%= products.stock %>" required>
                        <p  class="text-danger" id="stockError"></p>
                   
                    </div>
                </div>
                <div class="mb-3">
                    <label for="product_brand"  class="form-label">Brand</label>
                   
                    <input type="text" id="Brand" name="Brand" placeholder="Type here" class="form-control" id="product_brand" value="<%= products.Brand %>" required>
                    <p class="text-danger" id="brandError"></p>
                </div>
            </div>
        </div> <!-- card end// -->
        <div class="card mb-4">
            <div class="card-body">
                <div>
                    <label class="form-label">Description</label>
                    <textarea id="description" placeholder="Type here" class="form-control" name="Description" rows="4" required><%= products.description %></textarea>
                    <p class="text-danger" id="descError"></p>
                    <div id="descriptionError" class="Error"></div>
                </div>
            </div>
        </div> <!-- card end// -->
        
        <div class="card-body">
            <div id="existingImagesContainer">
                <% for (let i = 0; i < products.image.length; i++) { %>
                    <div data-filename="<%= products.image[i] %>" class="image-container">
                        <img src="./productImage/<%= products.image[i] %>" alt="Existing Image" class="existing-image" style="max-width: 100px; max-height: 100px;">
                        <a onclick="deleteSingleImage('<%= products._id %>','<%= products.image[i] %>')">
                            <span class="remove-icon">×</span> <!-- Use a simple '×' symbol -->
                        </a>
                    </div>
                <% } %>
            </div>
            
            
            <input class="form-control" type="file"  name="image" accept="image/*" enctype="multipart/form-data" id="imageInput" value="products.image[0]" onchange="displayImagePreview()" multiple>
            
            <div id="imageError" class="Error"></div>
            <!-- Container to display added images -->
            <div id="addedImagesContainer" class="thumbnails-container"></div>
        </div>
         <!-- card end// -->
    </div>

    <div class="col-lg-4">
        <div class="card mb-4">
            <div class="card-body">
                <!-- <div class="mb-3">
                    <label class="form-label">Stock</label>
                    <input  id="prod_stock" type="text" placeholder="Type here" name="productStock" class="form-control" value="<%= products.stock %>" required>
                    <p class="text-danger" id="sotckError"></p>
                </div> -->
                <!-- <div class="mb-3">
                    <label class="form-label">Status</label>
                    <select class="form-select">
                        <option>Published</option>
                        <option>Draft</option>
                    </select>
                </div> -->
                <div class="mb-3">
                    <div class="mb-4">
                        <label class="form-label">category</label>
                    
                        <% for(let i=0;i<category.length;i++){%>

                      <% console.log("prdoucts-category",products.Category); %>

                      <% console.log("category.id",category[i]._id); %>
                      <label class="mb-2 form-check form-check-inline" style="width: 45%;">
                        <input  class="form-check-input"  name="category" <% if (products.Category.toString() === category[i]._id.toString()) { %> checked <% } %>   type="radio" id="category"  required>
                        <span class="form-check-label">  <%= category[i].catName %></span>
                    </label>
                            <% } %>
                    </div>
                </div>
                <!-- ... (unchanged) ... -->
            </div>
        </div> <!-- card end// -->
    </div>
</form>
<script>
    function deleteSingleImage(productId, filename) {
    // Fetch API to delete the image
    fetch("/admin/delete-single-image", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ productId, filename }),
    })
      .then((response) => response.json())
      .then((data) => {
        // Handle success or error
        if (data.success) {
          removeImage(filename);
  
        } else {
          console.error("Error deleting image:", data.error);
        }
      })
      .catch((error) => {
        console.error("Error:", error);
      });
  }
  
  // remove the deleted image
  function removeImage(filename) {
    const imageElement = document.querySelector(`[data-filename="${filename}"]`);

    if (imageElement) {
        imageElement.remove();
    }
}
  
  // Assuming your delete link has an id like "deleteLink"
  const deleteLink = document.getElementById("deleteLink");
  
  // Add a click event listener to the delete link
  deleteLink.addEventListener("click", function (event) {
    event.preventDefault(); // Prevent the default anchor click behavior
    deleteSingleImage(productId, filename);
  });
</script>
<!-- <script>
    function deleteSingleImage(productId, imageName) {
        // Your logic to delete the image on the server (possibly using AJAX)
        
        // Remove the image container from the DOM
        const container = document.querySelector(`[data-filename="${imageName}"]`);
        container.remove();

        // Update the input field value with the remaining image names
        const remainingImages = Array.from(document.querySelectorAll('.image-container')).map(container => container.dataset.filename);
        document.getElementById('imageInput').value = remainingImages.join(',');
    }
    function displayImagePreview() {
        const input = document.getElementById('imageInput');
        const newImagesContainer = document.getElementById('newImagesContainer');

        // Clear the container before adding new images
        newImagesContainer.innerHTML = '';

        // Display preview for newly selected images
        for (const file of input.files) {
            const reader = new FileReader();

            reader.onload = function (e) {
                const preview = document.createElement('img');
                preview.src = e.target.result;
                preview.alt = 'New Image Preview';
                preview.style.maxWidth = '100px';
                preview.style.maxHeight = '100px';

                newImagesContainer.appendChild(preview);
            };

            reader.readAsDataURL(file);
        }

        // Update the input field value with all selected images
        updateInputFieldValue();
    }

    function updateInputFieldValue() {
        const existingImageNames = Array.from(document.querySelectorAll('.image-container')).map(container => container.dataset.filename);
        const newImageNames = Array.from(document.getElementById('newImagesContainer').querySelectorAll('img')).map(img => img.alt);

        const allImageNames = existingImageNames.concat(newImageNames);
        document.getElementById('imageInput').value = allImageNames.join(',');
    }
    
    document.addEventListener('DOMContentLoaded', function () {
        // Initialize imageInput value with existing image names
        const existingImageNames = Array.from(document.querySelectorAll('.image-container')).map(container => container.dataset.filename);
        document.getElementById('imageInput').value = existingImageNames.join(',');
    });


</script> -->
<script>
    document.getElementById("imageInput").addEventListener("change", handleFileSelect);
      
      function handleFileSelect(event) {
        const addedImagesContainer = document.getElementById("addedImagesContainer");
        addedImagesContainer.innerHTML = ""; // Clear previous content
    
        const files = event.target.files;
    
        for (let i = 0; i < files.length; i++) {
          const file = files[i];
    
          // Create thumbnail element
          const thumbnail = document.createElement("div");
          thumbnail.classList.add("thumbnail");
    
          // Create image element
          const img = document.createElement("img");
          img.src = URL.createObjectURL(file);
          img.alt = "thumbnail";
    
          // Set a fixed width for the image
          img.style.width = "50px"; // Adjust the width as needed
          img.style.height = "auto";
    
          // Create remove icon
          const removeIcon = document.createElement("span");
          removeIcon.classList.add("remove-icon");
          removeIcon.innerHTML = "&times;"; // Multiplication symbol as a cross
    
          // Event listener to remove the image on icon click
          removeIcon.addEventListener("click", function () {
            thumbnail.remove();
            updateInputField();
          });
    
          // Append elements to thumbnail
          thumbnail.appendChild(img);
          thumbnail.appendChild(removeIcon);
    
          // Append thumbnail to the container
          addedImagesContainer.appendChild(thumbnail);
        }
    
        updateInputField();
      }
    
      function updateInputField() {
        const addedImagesContainer = document.getElementById("addedImagesContainer");
        const thumbnails = addedImagesContainer.getElementsByClassName("thumbnail");
    
        // Get the names of the selected files and update the input field
        const fileNames = Array.from(thumbnails).map((thumbnail) => {
          const img = thumbnail.getElementsByTagName("img")[0];
          return img.alt; // Assuming the alt attribute contains the file name
        });
    
        // Update the input field with the file names
        const inputField = document.getElementById("imageInput");
        inputField.value = fileNames.join(", ");
      }
    </script>
<script>
    // document.addEventListener('DOMContentLoaded', function () {
    //     // Initialize imageInput value with existing image names
    //     const existingImageNames = Array.from(document.querySelectorAll('.image-container')).map(container => container.dataset.filename);
    //     document.getElementById('imageInput').value = existingImageNames.join(',');
    // });

    // Function to dynamically display selected image names
//     function displayImagePreview() {
//         const input = document.getElementById('imageInput');
//         const addedImagesContainer = document.getElementById('addedImagesContainer');

//         // Clear the container before adding new images
//         addedImagesContainer.innerHTML = '';

//         // Display preview for newly selected images
//         for (const file of input.files) {
//             const preview = document.createElement('div');
//             preview.textContent = file.name;
//             addedImagesContainer.appendChild(preview);
//         }
//     }

//     // Function to handle image deletion
//     function deleteSingleImage(productId, imageName) {
//         // Your logic to delete the image on the server (possibly using AJAX)
        
//         // Remove the image container from the DOM
//         const container = document.querySelector(`[data-filename="${imageName}"]`);
//         container.remove();

//         // Update the input field value with the remaining image names
//         const remainingImages = Array.from(document.querySelectorAll('.image-container')).map(container => container.dataset.filename);
//         document.getElementById('imageInput').value = remainingImages.join(',');

//         // Update the displayed image names in the addedImagesContainer
//         displayImagePreview();
//     }
// </script>
<script>
    function displayError(element, message) {
          const errorElement = document.getElementById(`${element.id}Error`);
          errorElement.innerHTML = message;
          element.parentNode.appendChild(errorElement);
      }
  
      function checkEmptyFields() {
          const fields = ['name', 'price', 'Brand', 'Color', 'stock','description'];
  
          let isEmpty = false;
  
          fields.forEach(field => {
              const inputElement = document.getElementById(field);
              const errorElement = document.getElementById(`${field}Error`);
  
              if (inputElement.value.trim() === '') {
                  isEmpty = true;
                  displayError(inputElement, 'Field is required');
              } else {
                  errorElement.innerHTML = ''; // Clear previous error messages
              }
          });
  
          return !isEmpty;
      }
        function validate() {

// Input feilds
const name = document.getElementById('productname');
   const color = document.getElementById('Color');
   const brand = document.getElementById('Brand');
   const price = document.getElementById('price');
   const description = document.getElementById('description');
   const stock = document.getElementById('stock');
   const image = document.getElementById('imageinput');

   // Error fields
   const nameError = document.getElementById('nameError');
   const descriptionError = document.getElementById('descriptionError');
   const brandError = document.getElementById('brandError'); // Corrected ID
   const priceError = document.getElementById('priceError');
   const colorError = document.getElementById('colorError');
   const stockError = document.getElementById('stockError');
   const imageError = document.getElementById('imageError');

   // Regex
   const nameRegex = /^[A-Za-z0-9]/;
   const descriptionRegex = /^[A-Za-z0-9]/;
   const colorRegex = /^[A-Za-z]/;
   const priceRegex = /^[0-9]/;
   const stockRegex = /^[0-9]/;
   const brandRegex = /^[A-Za-z]/;

   // Name field
   if (name.value.trim() === '') {
      nameError.innerHTML = 'Field is required';
      setTimeout(() => {
         nameError.innerHTML = '';
      }, 5000);
      return false;
   }
   if (!nameRegex.test(name.value)) {
      nameError.innerHTML = 'First letter should be capital';
      setTimeout(() => {
         nameError.innerHTML = '';
      }, 5000);
      return false;
   }

   // Description field
   if (description.value.trim() === '') {
      descriptionError.innerHTML = 'Field is required';
      setTimeout(() => {
         descriptionError.innerHTML = '';
      }, 5000);
      return false;
   }
   if (!descriptionRegex.test(description.value)) {
      descriptionError.innerHTML = 'Please enter a valid description';
      setTimeout(() => {
         descriptionError.innerHTML = '';
      }, 5000);
      return false;
   }

   // Brand field (Corrected variable name)
   if (brand.value.trim() === '') {
      brandError.innerHTML = 'Field is required';
      setTimeout(() => {
         brandError.innerHTML = '';
      }, 5000);
      return false;
   }

   // Stock field
   if (stock.value.trim() === '') {
      stockError.innerHTML = 'Field is required';
      setTimeout(() => {
         stockError.innerHTML = '';
      }, 5000);
      return false;
   }
   if (!stockRegex.test(stock.value)) {
      stockError.innerHTML = 'please enter a valid number';
      setTimeout(() => {
         stockError.innerHTML = '';
      }, 5000);
      return false;
   }

   // Image field
   if (image.value.trim() === '') {
      imageError.innerHTML = 'Upload at least one image';
      setTimeout(() => {
         imageError.innerHTML = '';
      }, 5000);
      return false;
   }

   // Color field
   if (color.value.trim() === '') {
      colorError.innerHTML = 'Field is required';
      setTimeout(() => {
         colorError.innerHTML = '';
      }, 5000);
      return false;
   }

   // Price field
   if (price.value.trim() === '') {
      priceError.innerHTML = 'Field is required';
      setTimeout(() => {
         priceError.innerHTML = '';
      }, 5000);
      return false;
   }
   if (!priceRegex.test(price.value)) {
      priceError.innerHTML = 'Please enter a valid number';
      setTimeout(() => {
         priceError.innerHTML = '';
      }, 5000);
      return false;
   }

   return true;
}
    </script>
    
<script src="Admin-assets/js/vendors/jquery-3.6.0.min.js"></script>
<script src="Admin-assets/js/vendors/bootstrap.bundle.min.js"></script>
<script src="Admin-assets/js/vendors/select2.min.js"></script>
<script src="Admin-assets/js/vendors/perfect-scrollbar.js"></script>
<script src="Admin-assets/js/vendors/jquery.fullscreen.min.js"></script>
<script src="Admin-assets/js/vendors/chart.js"></script>
<!-- Main Script -->
<script src="Admin-assets/js/main.js" type="text/javascript"></script>
<script src="Admin-assets/js/custom-chart.js" type="text/javascript"></script>
    </main>
    </body>
    </html>